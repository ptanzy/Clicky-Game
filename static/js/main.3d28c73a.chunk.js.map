{"version":3,"sources":["Components/ImageContainer/index.js","Components/Image/index.js","App.js","serviceWorker.js","index.js"],"names":["ImageContainer","props","react_default","a","createElement","Fragment","className","id","children","Image","concat","image","color","src","alt","onClick","flowerClicked","App","state","imageArr","flower_images","msg","score","highScore","clickedFlowers","titleColors","c1","c2","Math","floor","random","clicked","_this","includes","push","length","sort","b","setState","_this2","this","clasclassNames","Components_ImageContainer","map","flower","i","Components_Image","key","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d28c73a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n  function ImageContainer(props) {\n    return (\n      <React.Fragment>\n\n        <div className=\"container\">\n          <div id=\"image-container\">\n              {props.children}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n\nexport default ImageContainer;","import React from \"react\";\n\nfunction Image(props) {\n  return (\n\n        <div className={`card-panel ${props.image.color}`}>\n          <img className=\"responsive-img\"\n            src={props.image.image}\n            alt={`flower ${props.image.id}`}\n            onClick={() => props.flowerClicked(props.image.id)}\n          />\n        </div>\n\n  );\n}\n\nexport default Image;","import React, { Component } from 'react';\nimport './App.css';\nimport ImageContainer from \"./Components/ImageContainer\";\nimport Image from \"./Components/Image\";\nimport flower_images from \"./flower_images.json\";\n\nclass App extends Component {\n\n  state = {\n    imageArr: flower_images,\n    msg: \"Click a flower!\",\n    score: 0,\n    highScore: 0,\n    clickedFlowers: [],\n    titleColors: [{c1: \"blue lighten-1\", c2: \"lime-text text-accent-2\"},{c1: \"purple darken-1\", c2: \"orange-text text-lighten-1\"},\n                       {c1: \"pink accent-2\", c2: \"purple-text text-darken-4\"},{c1: \"deep-purple lighten-2\", c2: \"red-text text-lighten-4\"}][Math.floor(Math.random() * 4)]\n  };\n\n  flowerClicked = id => {\n    let clicked = this.state.clickedFlowers;\n    let msg = this.state.msg;\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n    if(clicked.includes(id)){\n      clicked = [];\n      msg = \"Previously clicked\";\n      if(score > highScore){\n        highScore = score;\n      }\n      score = 0;\n    }else{\n      clicked.push(id);\n      score++;\n    }\n    if(clicked.length === this.state.imageArr.length){\n      msg = \"Score Maxed Out! Play Again?\"\n      highScore = score;\n      score = 0;\n      clicked = [];\n    }\n    const imageArr = this.state.imageArr.sort((a, b)=> 0.5 - Math.random());;\n    this.setState({\n      imageArr: imageArr,\n      msg: msg,\n      score: score,\n      highScore: highScore,\n      clickedFlowers: clicked\n    })\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <header className=\"App\">\n          <div className={`nav-wrapper ${this.state.titleColors.c1}`}>\n            <h3 className={`brand-logo center ${this.state.titleColors.c2}`}>\n              React Click Game\n            </h3>\n          </div>\n          <div clasclassNames=\"blue lighten-1\" id=\"banner\">\n          <div className=\"container\">\n\n          </div>\n        </div>\n        </header>\n        <main>\n          <div className=\"row\">\n            <div className=\"col s12\">\n              <div className=\"card grey lighten-5\">\n                <div className=\"card-content\">\n                <div className=\"row\">\n                  <div className=\"col s12 m4 offset-m4 center-align grey lighten-4\">\n                      <h5>Have Fun and Enjoy!</h5>\n                      <p>\n                        Start the Click Game by clicking a flower. Each time you click a flower that you have yet to click you will be given a point. When you click an image that has\n                        already been clicked this round then the current round will end and a new round will begin. Your high score will be tracked and can be seen \n                        next to the current round's score. The highest possible score is 20. Start your clicking!\n                      </p>\n                  </div>    \n              </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col s12 m6 offset-m3 center-align white\">\n                    <h5 className=\"col s4 grey-text text-darken-3\" id=\"msg-box\">{this.state.msg}</h5>\n                    <h5 className=\"col s4 grey-text text-darken-3\" id=\"score-box\">Score: {this.state.score}</h5>\n                    <h5 className=\"col s4 grey-text text-darken-3\" id=\"highscore-box\">High Score: {this.state.highScore}</h5>\n                  </div> \n                </div>\n                  <ImageContainer msg={this.state.msg} score={this.state.score} highScore={this.state.highScore}>\n                    {\n                      \n                      this.state.imageArr.map((flower, i) => (\n                        <Image key={i} image={flower} flowerClicked={this.flowerClicked} />\n                      ))\n                    }\n                  </ImageContainer>\n              </div>\n            </div>\n          </div>\n        </main>\n        <div className=\"divider\"></div>\n        <footer className=\"page-footer blue-grey lighten-5\">\n          <div className=\"footer-copyright\">\n            <div className=\"container black-text\">\n              Â© Peter Tanzy, 2019\n              <a className=\"right\" href=\"https://github.com/ptanzy/Clicky-Game\">\n                Github\n              </a>\n            </div>\n          </div>\n        </footer>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}